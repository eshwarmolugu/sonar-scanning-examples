#!/usr/bin/groovy
@Library('pipeline-library') _
// pipeline-library (above) is imported from DOCET. Their github with all the source code is here:
//  https://github.devops.worldpay.local/DOCET/wp-pipeline-library

pipeline {


    stages {
        stage('Build with Tests, Running Sonar') {
            steps {
                echo "Build"
            }
        }

        stage('Publish artifact to ServiceNow') {
            when {
                branch 'release-*'
            }
            steps {
                script {
                    uploadArtifactToServiceNow()
                }
            }
        } //Publish artifact to ServiceNow

        stage('Publish Pact, OCP Init') {
            steps {
                echo "Publish Pact, OCP Init"
            }
        }

        stage('Build, Deploy, and Checkmarx') {
            parallel {
                stage('A2CR App Build and Deploy') {
                    steps {
                        echo "A2CR App Build and Deploy"
                    }
                }

                stage('A2CO Stub Server Build and Deploy') {
                    steps {
                        echo "A2CO Stub Server Build and Deploy"
                    }
                }

                stage('Checkmarx') {
                    steps {
                        echo "Checkmarx"
                    }
                }

                stage('Functional Test') {
                    steps {
                        functionalTest()
                    }
                }
            }
        }

        stage('Service Now reports uploads') {
            parallel {
                stage('Checkmarx Report Upload to ServiceNow'){
                    when {
                        branch 'release-*'
                    }
                    steps {
                        echo "Uploading Checkmarx report"
                    }
                }

                stage('SonarQube Report Upload to ServiceNow'){
                    steps {
                        sonarTest()
                    }
                }
            }
        }

        stage('Final Tests') {
            parallel {
                stage('Component Test') {
                    steps {
                        echo "Component Test"
                    }
                }

                stage('Pact Verification') {
                    steps {
                        echo "Contract Test"
                    }
                }

                stage('Performance Test') {
                    steps {
                        echo "Perf Test"
                    }  // end steps for Performance Test
                }  // end Performance Test
            }  // end Parallel
        }  // stage('Final Tests')

        stage('Deployment to production'){
            when {
                branch 'release-*'
            }
            steps {
                createServiceNowChangeRequest()
            }
        } //Deployment to production

        stage('Nexus Deploy') {
            steps {
                echo "Deploy to Nexus"
            }
        }

        stage('Increment version') {
            when {
                branch 'release-*'
            }
            steps {
                script {
                    echo "Version Increment"
                }
            }
        }
        stage('Push changes to GIT') {
            when {
                branch 'release-*'
            }
            steps {
                script {
                    echo "Push Changes to Git"
                }
            }
        }
    }  // end stages in Maven Agent
    post {
        success {
            echo "Success"
        }
        failure {
            echo "Failue"
        }
        aborted {
            echo "Error"
        }
        always {
            echo "Send Report"
        }
    }  // end post
}  // end Pipeline


def sonarTest() {
    if (!env.CODE_CHANGES) {
        echo "Skipping - there are no code changes."
        return
    } else {
        echo "Not skipping there are code changes."
    }

    try {
        environment {
    		 SCANNER_HOME = tool 'sonarScanner'
   		 //ORGANIZATION = "igorstojanovski-github"
    		 //PROJECT_NAME = "igorstojanovski_jenkins-pipeline-as-code"
  		}
      
	      //sh 'def scannerHome = tool 'SonarScanner 4.0';'
	       withSonarQubeEnv('SonarQube_Cloud') {
		     //  sh “/usr/local/apache-maven/apache-maven-3.3.9/bin/mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=admin -Dsonar.password=admin -Dsonar.github.repository=bvelivala/SampleInsurance -Dsonar.projectName=Autoclaim_${BUILD_NUMBER} -Dsonar.projectVersion=${BUILD_NUMBER} -Dsonar.sources=src/main”
		     // sh 'sonarScanner -Dproject.settings=sonar-scanner.properties'
		      // sh './gradlew sonarqube'
		      // println ${env.SONAR_HOST_URL}
		       sh '${SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=${SCANNER_HOME}/conf/sonar-scanner.properties'
		       
        
      }
        }
        timeout(time: 5, unit: 'MINUTES') {
            def qg = waitForQualityGate()
            if (qg.status == 'OK') {
                return  // Everything is good.
            } else if (qg.status == 'WARN' || qg.status == 'PENDING') {
                currentBuild.result = 'UNSTABLE'
            } else {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
        }
    } finally {
        junit '**/target/surefire-reports/TEST-*.xml'
    }
}

def functionalTest() {
    echo "Functional Test"
    //try {
        //withCredentials([string(credentialsId: 'A2CR_UNIQUE', variable: 'token')]) {
          //  mvnRun("test -DskipTestsUnit -DskipTestsComponent -Da2cr.lowell.unique='${token}' -Dspring.profiles.active=dev")
        //}
    //} finally {
      //  junit '**/target/surefire-reports/TEST-*.xml'
    //}


}

def uploadArtifactToServiceNow() {
    def pomVersion = "1.0.0"
    def applicationJar = "a2cr-app-1.0.0-exec.jar";
    def groupIdPath = "A2CR_GROUP";
    def repoPath = groupIdPath + "/a2cr-app";
    def packageName = "a2crpackage";

    echo "begin ---snDevOpsArtifact-----"
    snDevOpsArtifact(artifactsPayload: """{"artifacts": [{"name": "${applicationJar}", "version": "${pomVersion}","semanticVersion": "${pomVersion}","repositoryName": "${repoPath}"}], "branchName": "${env.BRANCH_NAME}"}""")
    echo "end ---snDevOpsArtifact-----"

    echo "begin ---snDevOpsPackage-----"
    snDevOpsPackage(name: "${packageName}", artifactsPayload: """{"artifacts": [{"name": "${applicationJar}", "version": "${pomVersion}","semanticVersion": "${pomVersion}","repositoryName": "${repoPath}"}], "branchName": "${env.BRANCH_NAME}"}""")
    echo "end ---snDevOpsPackage-----"
}



def createServiceNowChangeRequest() {
    echo "begin ---snDevOpsChange-----"
    snDevOpsChange()
    echo "end ---snDevOpsChange-----"
}
